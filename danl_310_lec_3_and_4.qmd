---
title: "DANL 310 | Lecture 3"
author: "Daniel Noone"
date: "01/27/2025"


execute: 
  warning: false
  message: false
  
toc: true
---

# Packages & DataFrame
```{r}
library(gapminder)
library(tidyverse)
library(skimr)
gapminder <- gapminder::gapminder
skim(gapminder)
mpg <- mpg
diamonds <- diamonds
```

# Making a Plot
```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
p + 
  geom_point(alpha = 0.25, color = 'blue') + 
  geom_smooth(method = 'gam', color = 'maroon')
```

# Plot with color argument in aes() mapping
```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp,
                          color = continent))
p + 
  geom_point(alpha = 0.5) + 
  geom_smooth() +
  theme_minimal()
```

# Plot with aesthetics set in individual geoms
```{r}

p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
p + 
  geom_point(color = 'purple') +
  geom_smooth(color = 'orange', method = 'loess', se = F, size = 1.5) # different non-linear method, and shading for error false
```

# Using scale_*() and labs() functions with plot
```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
p + 
  geom_point(alpha = 0.3) +
  geom_smooth() +
  scale_x_log10(labels = scales::dollar) +
  labs(x = "GDP Per Capita", y = "Life Expectancy in Years",
        title = "Economic Growth and Life Expectancy",
        subtitle = "Data points are country-years",
        caption = "Source: Gapminder.")
```

# Can have different aes() mappings over different geoms
```{r}
p <- ggplot(data = gapminder, 
            mapping = aes(x = gdpPercap, y = lifeExp))

p + geom_point(mapping = aes(color = continent)) +
    geom_smooth(method = "loess")  +
    scale_x_continuous(trans = scales::log_trans())  # natural log
```
# Histogram and Freq Poly geoms with binwidth
```{r}
ggplot(data = diamonds, mapping = aes(x = price)) +
  geom_histogram(binwidth = 500, fill = 'navy') +
  geom_freqpoly(color = 'maroon', linewidth = 1.25, binwidth = 500)
  
```

# Facet wrap with scales param
```{r}
ggplot(data = diamonds, mapping = aes(x = price)) +
  geom_histogram(binwidth = 30)+
  facet_wrap(~cut, scales = 'free_y') # Allows for the y_scale to be free, in this case fair cut diamond price distribution is hard to see without free_y for scales
```

# Sales df loading
```{r}
sale_df <- read_csv(
  "https://bcdanl.github.io/data/home_sales_nyc.csv")
```

# Histograms with log10(x)
```{r}
ggplot(data = sale_df,
       mapping = aes(x = sale.price))+
  geom_histogram(binwidth = 30000, fill = 'steelblue')

ggplot(data = sale_df,
       mapping = aes(x = log10(sale.price)))+
  geom_histogram(bins = 200, fill = 'steelblue')


```

# Bar geoms with stat = 'identity'
```{r}
ggplot(data = diamonds,
       mapping = aes(x = cut, fill = cut))+
  geom_bar()

ggplot(data = diamonds,
       mapping = aes(x = cut, y = price))+
  geom_bar(stat = 'identity')# Doesn't make sense to do here, but allows you to set your own y mapping to override count default, geom_col() can also be used which just allows you to set bar height with y in aes(), ggplot also used alphebetical order by default to map out categories, can factor with a given # of levels to specify order, ie; "Fair"<"Good"<"Ideal"<"Premium"<"Very Good"

```

# Bar geoms with proportion instead of count
```{r}
ggplot(data = diamonds, 
       mapping = aes(x = cut,
                     y = after_stat(prop), 
                     group = 1.75))+
  geom_bar()# have to also put group = some number inside of aes() in order for it to calc proportions successfully
```

# Stat summary
```{r}
ggplot(data = diamonds)+
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min, # If don't include these, will just be dots representing whatever is after fun =
    fun.max = max,
    fun = median # Can also put mean instead of median
  )
```

# Color and fill asthetic (position adjustment, primarily bar charts)
```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = 
             aes(x = cut,
                 fill = cut # color will outline bars, fill will fill colors into bars,
                 ))+ # all done by var set to 
  guides(fill = "none")# guides can remove legend, and can alter formatting for legends and theme stuff
```
```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = 
             aes(
               x = cut,
               fill = clarity
             ))
```

```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = 
             aes(
               x = cut,
               fill = clarity
             ), position = 'dodge') # If don't include 'dodge' bars will be stacked, if do will have multiple bars per x-axis category, clustered bar chart
```
```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = 
             aes(
               x = cut,
               fill = clarity
             ), position = 'fill')+
  labs(y = 'proportion')# Shows proportion of each clarity value per each cut value

```
# Coordinate Systems
```{r}
ggplot(data = mpg,
       mapping =
         aes(x = cty,
             y = hwy))+
  geom_point()+
  geom_abline()
```
```{r}
ggplot(data = mpg,
       mapping =
         aes(x = cty,
             y = hwy))+
  geom_point()+
  geom_abline()+
  coord_fixed()
```


