aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75) +
theme_map()
ggmap(NYC_Map, aes(color = c(route1, route2, route3))) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "#1C4982", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "#1C4982", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "#1C4982", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75) +
theme_map()
ggmap(NYC_Map, aes(fill = c(route1, route2, route3))) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "#1C4982", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "#1C4982", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "#1C4982", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75) +
theme_map()
geom_path(data = route1,
aes(x = lon, y = lat),
color = "red", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "blue", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "green", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75) +
theme_map()
NYC_Map <- get_map("Manhattan, NY",
source = "google",
api_key = apiKey,
zoom = 13)
locations <- geocode(
c("Central Park, NYC",
"Empire State Building, NY",
"Times Square, NYC")
)
locations <- locations |>
mutate(label = c("Central Park", "Empire State", "Times Square"))
ggmap(NYC_Map)) +
ggmap(NYC_Map) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "red", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "blue", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "green", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75) +
theme_map()
ggmap(NYC_Map) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "red", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "blue", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "green", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75, color = 'yellow') +
theme_map()
ggmap(NYC_Map) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "red", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "blue", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "green", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75, color = 'red') +
theme_map()
ggmap(NYC_Map) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "red", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "blue", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "green", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75, color = 'purple') +
theme_map()
ggmap(NYC_Map) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "red", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "blue", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "green", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75, color = 'maroon') +
theme_map()
ggmap(NYC_Map) +
geom_path(data = route1,
aes(x = lon, y = lat),
color = "red", size = 2,
lineend = "round") +
geom_path(data = route2,
aes(x = lon, y = lat),
color = "blue", size = 2,
lineend = "round")+
geom_path(data = route3,
aes(x = lon, y = lat),
color = "green", size = 2,
lineend = "round")+
geom_point(data = locations,
aes(x = lon, y = lat),
size = 2, color = "darkred") +
geom_text_repel(data = locations,
aes(x = lon, y = lat, label = label),
family = "nunito",
box.padding = 1.75, color = 'navy') +
theme_map()
library(tidyverse)
library(ggthemes)
svi <-  read.csv("C:\\Users\\noone\\OneDrive\\Documents\\School\\SUNY Geneseo\\Classes\\Spring 2025\\DANL499\\SVI2022_NEWYORK_tract.csv")
library(tidyverse)
library(ggthemes)
svi <-  read.csv("C:\\Users\\noone\\OneDrive\\Documents\\School\\SUNY Geneseo\\Classes\\Spring 2025\\DANL499\\SVI2022_NEWYORK_tract.csv")
svi_clean <- svi %>%
mutate(across(starts_with("RPL_THEME"), ~na_if(., -999)),
RPL_THEMES = na_if(RPL_THEMES, -999))
# Livingston County averages
livingston_avg <- svi_clean %>%
filter(COUNTY == "Livingston County") %>%
summarize(
across(c(RPL_THEME1, RPL_THEME2, RPL_THEME3, RPL_THEME4, RPL_THEMES),
~mean(., na.rm = TRUE), .names = "livingston_{.col}")
)
# NYS overall averages
nys_avg <- svi_clean %>%
summarize(
across(c(RPL_THEME1, RPL_THEME2, RPL_THEME3, RPL_THEME4, RPL_THEMES),
~mean(., na.rm = TRUE), .names = "nys_{.col}")
)
# Combine for comparison
comparison_df <- bind_cols(livingston_avg, nys_avg)
print(comparison_df)
library(tidyverse)
library(ggthemes)
svi <-  read.csv("C:\\Users\\noone\\OneDrive\\Documents\\School\\SUNY Geneseo\\Classes\\Spring 2025\\DANL499\\SVI2022_NEWYORK_tract.csv")
svi_clean <- svi %>%
mutate(RPL_THEME1 = ifelse(RPL_THEME1 == -999, NA, RPL_THEME1),
RPL_THEME2 = ifelse(RPL_THEME2 == -999, NA, RPL_THEME2),
RPL_THEME3 = ifelse(RPL_THEME3 == -999, NA, RPL_THEME3),
RPL_THEME4 = ifelse(RPL_THEME4 == -999, NA, RPL_THEME4),
RPL_THEMES = ifelse(RPL_THEMES == -999, NA, RPL_THEMES))
# Calculate Livingston County averages
livingston_avg <- svi_clean %>%
filter(COUNTY == "Livingston County") %>%
summarize(
livingston_RPL_THEME1 = mean(RPL_THEME1, na.rm = TRUE),
livingston_RPL_THEME2 = mean(RPL_THEME2, na.rm = TRUE),
livingston_RPL_THEME3 = mean(RPL_THEME3, na.rm = TRUE),
livingston_RPL_THEME4 = mean(RPL_THEME4, na.rm = TRUE),
livingston_RPL_THEMES = mean(RPL_THEMES, na.rm = TRUE)
)
# Calculate NY State overall averages
nys_avg <- svi_clean %>%
summarize(
nys_RPL_THEME1 = mean(RPL_THEME1, na.rm = TRUE),
nys_RPL_THEME2 = mean(RPL_THEME2, na.rm = TRUE),
nys_RPL_THEME3 = mean(RPL_THEME3, na.rm = TRUE),
nys_RPL_THEME4 = mean(RPL_THEME4, na.rm = TRUE),
nys_RPL_THEMES = mean(RPL_THEMES, na.rm = TRUE)
)
# Combine results side by side
comparison_df <- bind_cols(livingston_avg, nys_avg)
print(comparison_df)
library(tidyverse)
library(ggthemes)
svi <-  read.csv("C:\\Users\\noone\\OneDrive\\Documents\\School\\SUNY Geneseo\\Classes\\Spring 2025\\DANL499\\SVI2022_NEWYORK_tract.csv")
svi_clean <- svi %>%
mutate(RPL_THEME1 = ifelse(RPL_THEME1 == -999, NA, RPL_THEME1),
RPL_THEME2 = ifelse(RPL_THEME2 == -999, NA, RPL_THEME2),
RPL_THEME3 = ifelse(RPL_THEME3 == -999, NA, RPL_THEME3),
RPL_THEME4 = ifelse(RPL_THEME4 == -999, NA, RPL_THEME4),
RPL_THEMES = ifelse(RPL_THEMES == -999, NA, RPL_THEMES))
# Calculate Livingston County averages
liv_avg <- svi_clean %>%
filter(COUNTY == "Livingston County") %>%
summarize(
livingston_RPL_THEME1 = mean(RPL_THEME1, na.rm = TRUE),
livingston_RPL_THEME2 = mean(RPL_THEME2, na.rm = TRUE),
livingston_RPL_THEME3 = mean(RPL_THEME3, na.rm = TRUE),
livingston_RPL_THEME4 = mean(RPL_THEME4, na.rm = TRUE),
livingston_RPL_THEMES = mean(RPL_THEMES, na.rm = TRUE)
)
# Calculate NY State overall averages
nys_avg <- svi_clean %>%
summarize(
nys_RPL_THEME1 = mean(RPL_THEME1, na.rm = TRUE),
nys_RPL_THEME2 = mean(RPL_THEME2, na.rm = TRUE),
nys_RPL_THEME3 = mean(RPL_THEME3, na.rm = TRUE),
nys_RPL_THEME4 = mean(RPL_THEME4, na.rm = TRUE),
nys_RPL_THEMES = mean(RPL_THEMES, na.rm = TRUE)
)
# Combine results side by side
comp_df <- bind_cols(liv_avg, nys_avg)
print(comp_df)
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
icon = "money-bill",
color = "success",
value = paste0("Livingston:", comp_df$livingston_RPL_THEME1, ' --- ' , 'NYS:', comp_df$nys_RPL_THEME1)
)
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
icon = "money-bill",
color = "success",
value = paste0("Livingston:", round(comp_df$livingston_RPL_THEME1,2), ' --- ' , 'NYS:', comp_df$nys_RPL_THEME1)
)
value = paste0("Livingston:", round(comp_df$livingston_RPL_THEME1,2), ' --- ' , 'NYS:', round(comp_df$nys_RPL_THEME1,2)
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
icon = "money-bill",
color = "success",
value = paste0("Livingston:", round(comp_df$livingston_RPL_THEME1,2), ' --- ' , 'NYS:', round(comp_df$nys_RPL_THEME1,2))
)
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
icon = "money-bill",
color = "success",
value = paste0("Livingston:", round(comp_df$livingston_RPL_THEME1,3), ' --- ' , 'NYS:', round(comp_df$nys_RPL_THEME1,3))
)
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
icon = "money-bill",
color = "success",
value = paste0("Livingston:", round(comp_df$livingston_RPL_THEME1,3), ' --- ' , 'NYS:', round(comp_df$nys_RPL_THEME1,4))
)
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
icon = "money-bill",
color = "success",
value = paste0("Livingston:", round(comp_df$livingston_RPL_THEME1,3), ' --- ' , 'NYS:', round(comp_df$nys_RPL_THEME1,3))
)
#| content: valuebox
#| title: Theme 1 Comparison (Socioeconomic Status)
list(
icon = "money-bill",
color = "success",
value = paste0("Livingston:", comp_df$livingston_RPL_THEME1, ' --- ' , 'NYS:', comp_df$nys_RPL_THEME1)
)
#| content: valuebox
#| title: "Theme 2 Comparison (Household Characteristics)"
list(
icon = "home",
color = "primary",
value = paste0("Livingston:", comp_df$livingston_RPL_THEME2, ' --- ' , 'NYS:', comp_df$nys_RPL_THEME2)
)
#| content: valuebox
#| title: "Theme 3 Comparison (Racial/Ethnic Minority Status)"
list(
icon = "home",
color = "primary",
value = paste0("Livingston:", comp_df$livingston_RPL_THEME3, ' --- ' , 'NYS:', comp_df$nys_RPL_THEME3)
)
#| content: valuebox
#| title: "Theme 4 Comparison (Transportation and Housing)"
list(
icon = "car-side",
color = "warning",
value = paste0("Livingston:", comp_df$livingston_RPL_THEME4, ' --- ' , 'NYS:', comp_df$nys_RPL_THEME4)
)
summary <- svi %>%
filter(COUNTY == "Livingston County") %>%
summarise(
T1 = mean(RPL_THEME1, na.rm = TRUE),
T2 = mean(RPL_THEME2, na.rm = TRUE),
T3 = mean(RPL_THEME3, na.rm = TRUE),
T4 = mean(RPL_THEME4, na.rm = TRUE),
COMP = mean(RPL_THEMES, na.rm = TRUE)
)
#| echo: false
#| message: false
#| warning: false
library(knitr)
kable(theme_summary_df, caption = "Livingston County Theme Averages")
#| echo: false
#| message: false
#| warning: false
library(knitr)
kable(summary, caption = "Livingston County Theme Averages")
#| echo: false
#| message: false
#| warning: false
library(knitr)
kable(summary, caption = "Livingston County Theme Averages")
#| title: Correlation Between SVI Themes
library(reshape2)
#| title: Correlation Between SVI Themes
install.packages('reshape2')
#| title: Correlation Between SVI Themes
library(reshape2)
# Calculate correlations
theme_corr <- svi %>%
select(RPL_THEME1, RPL_THEME2, RPL_THEME3, RPL_THEME4) %>%
cor(use = "pairwise.complete.obs")
# Melt for ggplot
melted_corr <- melt(theme_corr)
# Plot heatmap
ggplot(melted_corr, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
labs(title = "Correlation Matrix of SVI Themes", x = "", y = "") +
theme_minimal()
#| title: Correlation Between SVI Themes
library(reshape2)
theme_corr <- svi %>%
select(SPL_THEME1, SPL_THEME2, SPL_THEME3, SPL_THEME4) %>%
cor(use = "pairwise.complete.obs")
melted_corr <- melt(theme_corr)
ggplot(melted_corr, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
labs(title = "Matrix of Correlations Between SVI Themes", x = "", y = "") +
theme_minimal()
pop <- svi %>%
filter(COUNTY %in% counties) %>%
group_by(COUNTY) %>%
summarise(pop = sum(svi$E_TOTPOP))
#| title: Estimated Population of Surrounding Counties
counties <- c('Monroe County', 'Livingston County', 'Wayne County', 'Yates County', 'Genesee County')
pop <- svi %>%
filter(COUNTY %in% counties) %>%
group_by(COUNTY) %>%
summarise(pop = sum(svi$E_TOTPOP))
View(pop)
pop <- svi %>%
filter(COUNTY %in% counties) %>%
group_by(COUNTY) %>%
summarise(pop = sum(E_TOTPOP))
View(pop)
ggplot(popu,
mapping = aes(x = COUNTY, y = pop), stat = 'identity')+
geom_bar()
#| title: Estimated Population of Surrounding Counties
counties <- c('Monroe County', 'Livingston County', 'Wayne County', 'Yates County', 'Genesee County')
popu <- svi %>%
filter(COUNTY %in% counties) %>%
group_by(COUNTY) %>%
summarise(pop = sum(E_TOTPOP))
ggplot(popu,
mapping = aes(x = COUNTY, y = pop), stat = 'identity')+
geom_bar()
ggplot(popu,
mapping = aes(x = COUNTY, y = pop), stat = 'identity')+
geom_col()
#| title: Estimated Population of Surrounding Counties
counties <- c('Monroe County', 'Livingston County', 'Wayne County', 'Yates County', 'Genesee County')
popu <- svi %>%
filter(COUNTY %in% counties) %>%
group_by(COUNTY) %>%
summarise(pop = sum(E_TOTPOP)) %>%
mutate(COUNTY = fct_reorder(COUNTY, pop))
ggplot(popu,
mapping = aes(x = COUNTY, y = pop), stat = 'identity')+
geom_col()
ggplot(popu,
mapping = aes(x = COUNTY, y = pop, fill = 'blue'), stat = 'identity')+
geom_col()
ggplot(popu,
mapping = aes(x = COUNTY, y = pop), stat = 'identity')+
geom_col()
list(
icon = "money-bill",
color = "success",
value = paste0(round(comp_df$livingston_RPL_THEME1,2))
)
#| content: valuebox
#| title: "Theme 2 (Household Characteristics)"
list(
icon = "home",
color = "primary",
value = paste0(round(comp_df$livingston_RPL_THEME2,2))
)
#| content: valuebox
#| title: "Theme 3 Comparison (Racial/Ethnic Minority Status)"
list(
icon = "globe",
color = "secondary",
value = paste0(round(comp_df$livingston_RPL_THEME3,2))
)
#| content: valuebox
#| title: "Theme 4 (Transportation and Housing)"
list(
icon = "car-side",
color = "warning",
value = paste0(round(comp_df$livingston_RPL_THEME4,2))
)
summary <- svi %>%
summarise(
T1 = mean(RPL_THEME1, na.rm = TRUE),
T2 = mean(RPL_THEME2, na.rm = TRUE),
T3 = mean(RPL_THEME3, na.rm = TRUE),
T4 = mean(RPL_THEME4, na.rm = TRUE),
COMP = mean(RPL_THEMES, na.rm = TRUE)
)
summary <- svi_clean %>%
summarise(
T1 = mean(RPL_THEME1, na.rm = TRUE),
T2 = mean(RPL_THEME2, na.rm = TRUE),
T3 = mean(RPL_THEME3, na.rm = TRUE),
T4 = mean(RPL_THEME4, na.rm = TRUE),
COMP = mean(RPL_THEMES, na.rm = TRUE)
)
